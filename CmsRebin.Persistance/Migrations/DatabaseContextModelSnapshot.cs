// <auto-generated />
using System;
using CmsRebin.Persistance.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CmsRebin.Persistance.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CmsRebin.Domain.Entities.Collections.FieldsofTables", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"), 1L, 1);

                    b.Property<long>("IdTable")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("fieldname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("interfaces")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("relation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("FieldsofTable");
                });

            modelBuilder.Entity("CmsRebin.Domain.Entities.Collections.RelationsofTables", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"), 1L, 1);

                    b.Property<long>("TypeofReleation")
                        .HasColumnType("bigint");

                    b.Property<long>("many_collection")
                        .HasColumnType("bigint");

                    b.Property<long>("many_field")
                        .HasColumnType("bigint");

                    b.Property<long>("one_collection")
                        .HasColumnType("bigint");

                    b.Property<long>("one_field")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.ToTable("RelationsofTable");
                });

            modelBuilder.Entity("CmsRebin.Domain.Entities.Collections.Tables", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"), 1L, 1);

                    b.Property<long>("IdDBase")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("collection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("singleton")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            id = 1L,
                            IdDBase = 0L,
                            InsertTime = new DateTime(2022, 3, 5, 12, 14, 3, 22, DateTimeKind.Local).AddTicks(4821),
                            IsRemoved = false,
                            collection = "Role",
                            note = "",
                            singleton = false
                        },
                        new
                        {
                            id = 2L,
                            IdDBase = 0L,
                            InsertTime = new DateTime(2022, 3, 5, 12, 14, 3, 22, DateTimeKind.Local).AddTicks(4869),
                            IsRemoved = false,
                            collection = "Users",
                            note = "",
                            singleton = false
                        });
                });

            modelBuilder.Entity("CmsRebin.Domain.Entities.Collections.TypeofReleation", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"), 1L, 1);

                    b.Property<string>("typerelation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("TypeofReleation");

                    b.HasData(
                        new
                        {
                            id = 1L,
                            typerelation = "1-1"
                        },
                        new
                        {
                            id = 2L,
                            typerelation = "1-n"
                        },
                        new
                        {
                            id = 3L,
                            typerelation = "m-n"
                        });
                });

            modelBuilder.Entity("CmsRebin.Domain.Entities.Commons.ModelContainer", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"), 1L, 1);

                    b.Property<long?>("fieldsofTablesid")
                        .HasColumnType("bigint");

                    b.Property<long?>("permitionstoActivitiesid")
                        .HasColumnType("bigint");

                    b.Property<long?>("relationsofTablesid")
                        .HasColumnType("bigint");

                    b.Property<string>("roleid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("tablesid")
                        .HasColumnType("bigint");

                    b.Property<long?>("typeofFieldid")
                        .HasColumnType("bigint");

                    b.Property<long?>("typeofReleationid")
                        .HasColumnType("bigint");

                    b.Property<long?>("userid")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("fieldsofTablesid");

                    b.HasIndex("permitionstoActivitiesid");

                    b.HasIndex("relationsofTablesid");

                    b.HasIndex("roleid");

                    b.HasIndex("tablesid");

                    b.HasIndex("typeofFieldid");

                    b.HasIndex("typeofReleationid");

                    b.HasIndex("userid");

                    b.ToTable("ModelContainer");
                });

            modelBuilder.Entity("CmsRebin.Domain.Entities.Database.DatabaseList", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"), 1L, 1);

                    b.Property<string>("DBName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("Userid")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("Userid");

                    b.ToTable("DatabaseLists");
                });

            modelBuilder.Entity("CmsRebin.Domain.Entities.Field.TypeofField", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"), 1L, 1);

                    b.Property<string>("typefield")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("TypeofField");

                    b.HasData(
                        new
                        {
                            id = 1L,
                            typefield = "int"
                        },
                        new
                        {
                            id = 2L,
                            typefield = "bigint"
                        },
                        new
                        {
                            id = 3L,
                            typefield = "nvarchar(50)"
                        },
                        new
                        {
                            id = 4L,
                            typefield = "binary(50)"
                        },
                        new
                        {
                            id = 5L,
                            typefield = "text"
                        },
                        new
                        {
                            id = 6L,
                            typefield = "bit"
                        },
                        new
                        {
                            id = 7L,
                            typefield = "char(10)"
                        },
                        new
                        {
                            id = 8L,
                            typefield = "date"
                        },
                        new
                        {
                            id = 9L,
                            typefield = "datetime"
                        },
                        new
                        {
                            id = 10L,
                            typefield = "datetime2(7)"
                        },
                        new
                        {
                            id = 11L,
                            typefield = "datetimeoffset(7)"
                        },
                        new
                        {
                            id = 12L,
                            typefield = "decimal(18,0)"
                        },
                        new
                        {
                            id = 13L,
                            typefield = "float"
                        },
                        new
                        {
                            id = 14L,
                            typefield = "geography"
                        },
                        new
                        {
                            id = 15L,
                            typefield = "geometry"
                        },
                        new
                        {
                            id = 16L,
                            typefield = "hierarchyid"
                        },
                        new
                        {
                            id = 17L,
                            typefield = "image"
                        },
                        new
                        {
                            id = 18L,
                            typefield = "money"
                        },
                        new
                        {
                            id = 19L,
                            typefield = "nchar(10)"
                        },
                        new
                        {
                            id = 20L,
                            typefield = "ntext"
                        },
                        new
                        {
                            id = 21L,
                            typefield = "numeric(8,0)"
                        },
                        new
                        {
                            id = 22L,
                            typefield = "nvarchar(MAX)"
                        },
                        new
                        {
                            id = 23L,
                            typefield = "real"
                        },
                        new
                        {
                            id = 24L,
                            typefield = "time(7)"
                        },
                        new
                        {
                            id = 25L,
                            typefield = "xml"
                        });
                });

            modelBuilder.Entity("CmsRebin.Domain.Entities.Persons.PermitionstoActivities", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"), 1L, 1);

                    b.HasKey("id");

                    b.ToTable("PermitionstoActivitie");
                });

            modelBuilder.Entity("CmsRebin.Domain.Entities.Persons.Role", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("rolename")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            id = "AQAAAAEAACcQAAAAEB4wNoDqGyACrBZ2v8P9cUmTa+ck14dPufX+J58eLpEmpPukxjpyrT2N9xzKL5E8JQ==",
                            InsertTime = new DateTime(2022, 3, 5, 12, 14, 3, 22, DateTimeKind.Local).AddTicks(5105),
                            IsRemoved = false,
                            rolename = "admin"
                        },
                        new
                        {
                            id = "AQAAAAEAACcQAAAAEGCtAmEFvmovRZ1NwQ+u3zwVEu+hIA7hRKv/OkznkTVl8OS43ttdkR0JIYuc4xssIg==",
                            InsertTime = new DateTime(2022, 3, 5, 12, 14, 3, 29, DateTimeKind.Local).AddTicks(544),
                            IsRemoved = false,
                            rolename = "operator"
                        },
                        new
                        {
                            id = "AQAAAAEAACcQAAAAEMic1aivu3144bJb/7r3zy/E03bicQ15rQqPN7yG8bwTjmqR8K78aNATYPA0sJ2iUA==",
                            InsertTime = new DateTime(2022, 3, 5, 12, 14, 3, 35, DateTimeKind.Local).AddTicks(7110),
                            IsRemoved = false,
                            rolename = "user"
                        });
                });

            modelBuilder.Entity("CmsRebin.Domain.Entities.Persons.Tokens", b =>
                {
                    b.Property<long>("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("CmsRebin.Domain.Entities.Persons.Users", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Roleid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("location")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("Roleid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CmsRebin.Domain.Entities.Commons.ModelContainer", b =>
                {
                    b.HasOne("CmsRebin.Domain.Entities.Collections.FieldsofTables", "fieldsofTables")
                        .WithMany()
                        .HasForeignKey("fieldsofTablesid");

                    b.HasOne("CmsRebin.Domain.Entities.Persons.PermitionstoActivities", "permitionstoActivities")
                        .WithMany()
                        .HasForeignKey("permitionstoActivitiesid");

                    b.HasOne("CmsRebin.Domain.Entities.Collections.RelationsofTables", "relationsofTables")
                        .WithMany()
                        .HasForeignKey("relationsofTablesid");

                    b.HasOne("CmsRebin.Domain.Entities.Persons.Role", "role")
                        .WithMany()
                        .HasForeignKey("roleid");

                    b.HasOne("CmsRebin.Domain.Entities.Collections.Tables", "tables")
                        .WithMany()
                        .HasForeignKey("tablesid");

                    b.HasOne("CmsRebin.Domain.Entities.Field.TypeofField", "typeofField")
                        .WithMany()
                        .HasForeignKey("typeofFieldid");

                    b.HasOne("CmsRebin.Domain.Entities.Collections.TypeofReleation", "typeofReleation")
                        .WithMany()
                        .HasForeignKey("typeofReleationid");

                    b.HasOne("CmsRebin.Domain.Entities.Persons.Users", "user")
                        .WithMany()
                        .HasForeignKey("userid");

                    b.Navigation("fieldsofTables");

                    b.Navigation("permitionstoActivities");

                    b.Navigation("relationsofTables");

                    b.Navigation("role");

                    b.Navigation("tables");

                    b.Navigation("typeofField");

                    b.Navigation("typeofReleation");

                    b.Navigation("user");
                });

            modelBuilder.Entity("CmsRebin.Domain.Entities.Database.DatabaseList", b =>
                {
                    b.HasOne("CmsRebin.Domain.Entities.Persons.Users", "User")
                        .WithMany("DatabaseLists")
                        .HasForeignKey("Userid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CmsRebin.Domain.Entities.Persons.Tokens", b =>
                {
                    b.HasOne("CmsRebin.Domain.Entities.Persons.Users", "Users")
                        .WithMany()
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CmsRebin.Domain.Entities.Persons.Users", b =>
                {
                    b.HasOne("CmsRebin.Domain.Entities.Persons.Role", "Role")
                        .WithMany("user")
                        .HasForeignKey("Roleid");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CmsRebin.Domain.Entities.Persons.Role", b =>
                {
                    b.Navigation("user");
                });

            modelBuilder.Entity("CmsRebin.Domain.Entities.Persons.Users", b =>
                {
                    b.Navigation("DatabaseLists");
                });
#pragma warning restore 612, 618
        }
    }
}
